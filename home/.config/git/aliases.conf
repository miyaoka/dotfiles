[alias]
# =============================================================================
# ステージング / add
# =============================================================================
  a = !git unstaged | xargs -r git add && git s
  aa = !git add -A && git s
  au = !git add -u && git s # 既存ファイルのみstaging
  aaa = !git aa && git cm 'WIP' -n
  # ブランチを作りpush
  aaaa = !git swc "wip-$(date +%Y%m%d_%H%M%S)" && git aaa && git ps
  # quicksave: reflogに現在の状態を記録してリセット
  qs = !git aa && git cm "quicksave-$(date +%Y%m%d_%H%M%S)" -n && git rr

# =============================================================================
# ブランチ管理 / branch
# =============================================================================
  # branch delete: ローカルブランチをfzfで選択削除
  bd = !branches=$(git bl | fzf -m --header '[delete local branch (multi-select with Tab)]' | awk '{ print $2 }') && [ -n \"$branches\" ] && git remove-branch-and-worktree $branches
  # branch delete remote: リモートブランチをfzfで選択削除（確認付き）
  bdr = !branch=$(git br | fzf --header '[delete remote branch]' | awk '{print $2}') && test -n \"$branch\" && printf \"Delete remote branch %s?\" \"$branch\" && read confirm && git push -d origin \"$branch\"
  # branch delete clean: 安全に削除可能なローカルブランチを自動削除（gone + merged）
  bdc = !branches=$(git get-deletable-branches) && [ -n \"$branches\" ] && echo \"clean branches:\" && echo \"$branches\" | sed 's/^/- /' && echo && echo \"continue?\" && read confirm && echo \"$branches\" | tr '\\n' ' ' | xargs git remove-branch-and-worktree

# ユーティリティ

  # ブランチ一覧（日付順）
  b = branch --sort=-committerdate
  # 日付付きで表示
  bdate = !git for-each-ref --sort=-committerdate --format='%(committerdate:short) %(color:yellow)%(refname:short)%(color:reset) %(color:green)[%(authorname)]%(color:reset) %(subject)' --exclude='refs/remotes/*/HEAD'
  # local
  bl = !git bdate refs/heads
  # local only (no upstream)
  blo = !git for-each-ref --format='%(refname:short) %(upstream)' --sort=-committerdate refs/heads | awk '$2 == \"\" {print $1}' | xargs -I {} git bdate refs/heads/{}
  # remote
  br = !git bdate refs/remotes | sed 's/origin\\///'
  # worktreeがあれば削除してからブランチ削除
  remove-branch-and-worktree = "!f() { for branch in \"$@\"; do worktree_path=$(git worktree list | grep \"\\[$branch\\]\" | awk '{print $1}') || true; [ -n \"$worktree_path\" ] && git worktree remove \"$worktree_path\" || true; git branch -D \"$branch\" || true; done; }; f"
  # リモートが削除された（gone）ブランチを取得
  get-gone-branches = !git branch -vv | grep ': gone]' | sed 's/^[ *]*//' | awk '{print $1}'
  # 現在のブランチにマージ済みのブランチを取得（リモートトラッキングなし）
  get-merged-branches = !git for-each-ref --merged HEAD --format='%(refname:short) %(upstream)' refs/heads | awk 'NF == 1 {print $1}'
  # 削除可能なブランチを取得（gone + merged、現在のブランチを除く）
  get-deletable-branches = !current=$(git branch --show-current) && gone=$(git get-gone-branches) && merged=$(git get-merged-branches) && printf \"%s\\n%s\\n\" \"$gone\" \"$merged\" | grep -v '^$' | grep -v \"^$current$\" | sort -u

# =============================================================================
# コミット / commit
# =============================================================================
  c = commit
  cv = commit -v
  cm = commit -m
  cam = commit --amend -m
  can = commit --amend --no-edit
  cav = commit --amend -v

# =============================================================================
# 差分表示 / diff
# =============================================================================
  d = diff
  dn = diff --name-only
  dc = diff --cached
  dcn = diff --cached --name-only
  um = !git --no-pager diff --name-only --diff-filter=U

# =============================================================================
# ログ表示 / log
# =============================================================================
  l = log --date=format-local:'%Y-%m-%d %H:%M' --pretty=format:'%C(yellow)%h %Cgreen%cd %Cblue%cn %Creset%s'
  ll = !git l --stat
  lg = !git l --graph
  lm = !git l --merges

# =============================================================================
# リモート操作 / fetch & push & pull
# =============================================================================
  ft = fetch --prune
  # upstream
  ftu = fetch upstream --prune

  pl = pull
  ps = push
  psf = push --force-with-lease --force-if-includes

# =============================================================================
# 変更の取り消し / reset
# =============================================================================
  # ファイル選択式reset
  r = !git staged | xargs -r git reset
  # reset all
  ra = reset
  rh = reset --hard
  # reset to origin
  rho = !git cbn | sed 's/\\.*/origin\\/&/' | xargs -r git rh
  # reset to upstream
  rhu = !git cbn | sed 's/\\.*/upstream\\/&/' | xargs -r git rh
  # 1つ前にreset
  rr = reset @^1
  # コミット選択式reset
  rrr = !git select-commit | xargs -r git reset && git s
  # マージコミット選択式reset
  rrrm = !git lm | fzf | awk '{ print $1 }' | xargs -r git reset && git s
  
# =============================================================================
# 履歴の書き換え / rebase
# =============================================================================
  rb = rebase
  rba = rebase --abort
  rbc = rebase --continue
  # コミット選択式インタラクティブリベース
  rbi = !git select-commit | xargs -r git rebase -i

  # コミット選択式fixup
  fx = !git select-commit | xargs -r git commit --fixup
  # コミット選択式fixup+rebase
  fxr = !commit=$(git select-commit) && [ -n \"$commit\" ] && git commit --fixup \"$commit\" && git rebase --autosquash \"$commit\"^

# =============================================================================
# 一時保存 / stash
# =============================================================================
  st = stash
  stp = stash pop
  stl = stash list
  sta = stash apply

# =============================================================================
# ブランチ切り替え / switch
# =============================================================================
  # ブランチ切り替え（worktreeなら$EDITORで開く、そうでなければswitch）
  sw = !branch=$(git bl | fzf --header '[switch or open worktree]' | awk '{print $2}') && [ -n \"$branch\" ] && (worktree_path=$(git worktree list | grep \"\\[$branch\\]\" | awk '{print $1}') && [ -n \"$worktree_path\" ] && $EDITOR \"$worktree_path\" || git switch \"$branch\")
  # 直前にswitch
  sww = switch -
  # reflogから過去のcheckout履歴から選択してswitch（削除済みブランチも含まれる）
  swww = !git reflog | sed -n 's/.*checkout:.* to \\(.*\\)$/\\1/p' | awk '!seen[$0]++' | fzf | xargs -r git switch
  # ブランチ作成してswitch
  swc = switch -c
  # remoteブランチからswitch
  swr = !git ft && git br | grep -v 'HEAD' | fzf --exact --no-sort | awk '{ print $2 }' | xargs -r git switch

# ユーティリティ
  swm = switch main
  swd = switch dev

# =============================================================================
# ワークツリー管理 / worktree
# =============================================================================
  wl = worktree list
  # worktree switch: 選択ブランチからworktree作成 or worktreeを開く
  ws = !repo=$(basename $(pwd)) && branch=$(git bl | fzf --header '[create worktree and open in code]' | awk '{print $2}') && [ -n \"$branch\" ] && worktree_dir=\"../$repo.w/$branch\" && (git worktree add \"$worktree_dir\" \"$branch\" 2>/dev/null || echo \"Worktree already exists or creation failed\") && $EDITOR \"$worktree_dir\"
  # worktree switch create: worktree作成（引数指定）
  wsc = "!f() { repo=$(basename $(pwd)) && worktree_dir=\"../$repo.w/$1\" && git worktree add -b \"$1\" \"$worktree_dir\" && $EDITOR \"$worktree_dir\"; }; f"
  # worktree remove
  wr = !git worktree list | grep -v '(bare)' | sed '1d' | fzf -m --header '[remove worktree (multi-select with Tab)]' | awk '{print $1}' | xargs -r -I {} git worktree remove {}
  # worktree remove with branch: worktreeとブランチを同時削除
  wrr = !worktree_info=$(git worktree list | grep -v '(bare)' | sed '1d' | fzf --header '[remove worktree and branch]') && worktree_path=$(echo \"$worktree_info\" | awk '{print $1}') && branch=$(echo \"$worktree_info\" | grep -o '\\[.*\\]' | tr -d '[]') && [ -n \"$worktree_path\" ] && [ -n \"$branch\" ] && git worktree remove \"$worktree_path\" && git branch -D \"$branch\"
  # worktree prune: 削除されたブランチのworktreeを整理
  wp = worktree prune -v

# =============================================================================
# マージ・コンフリクト解決 / merge & conflict
# =============================================================================
  # コンフリクトファイルをtheirsで解決
  cft = !git select-conflict | xargs -r git checkout --theirs
  # コンフリクトファイルをoursで解決  
  cfo = !git select-conflict | xargs -r git checkout --ours

# =============================================================================
# 複合操作 / workflow
# =============================================================================
  # 最新のremote状態に更新して不要ブランチ・worktree削除
  up = !git ft && git rho && git bdc && git wp

# =============================================================================
# ファイル削除 / clean
# =============================================================================
  # fzf選択式clean (復元不可能なため確認付き)
  cl = !files=$(git untracked) && test -n \"$files\" && printf '%s\\n' \"$files\" | tr '\\n' '\\0' | xargs -0 -r git clean -dn && echo && echo "Continue?" && read confirm && printf '%s\\n' \"$files\" | tr '\\n' '\\0' | xargs -0 -r git clean -f
  # clean all (復元不可能なため確認付き)
  cla = !output=$(git clean -dn) && [ -n \"$output\" ] && echo \"$output\" && echo "----" && echo "Continue?" && read confirm && git clean -df || echo "Nothing to clean"

# =============================================================================
# 二分探索 / bisect
# =============================================================================
  bs = bisect start
  # マージコミットのみ辿る
  bsf = bisect start --first-parent
  bsb = bisect bad
  bsg = bisect good
  bsr = bisect reset

# =============================================================================
# その他 / other
# =============================================================================
  s = status --short --branch

# =============================================================================
# ユーティリティ / util
# =============================================================================
  alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/[\\1] \\2/' | sort | fzf --preview 'echo {}' --preview-window=wrap
  # current branch name
  cbn = branch --show-current # rev-parse --abbrev-ref HEAD
  staged = !git diff --name-only --cached | fzf -m --preview 'git diff --color=always HEAD {}'
  unstaged = !git ls-files -m -o --exclude-standard | fzf -m --preview 'git diff --color=always {}'
  modified = !git diff --name-only | fzf -m --preview 'git diff --color=always HEAD {}'
  untracked = !git ls-files --others --exclude-standard | fzf -m
  info = remote show origin
  # コミットをfzfで選択
  select-commit = !git l | fzf | awk '{ print $1 }'
  # コンフリクトファイルをfzfで選択
  select-conflict = !git diff --name-only --diff-filter=U | fzf -m --preview 'git diff --color=always {}'