# user
[user]
	name = Masaya Kazama
	email = miyaokamiyao@gmail.com
	username = miyaoka
[core]
	editor = code -w
	ignorecase = false
[credential]
	helper = cache
[ghq]
  root = ~/src

# recommended https://blog.gitbutler.com/how-git-core-devs-configure-git/
[column]
  ui = auto
[branch]
  sort = -committerdate
[tag]
  sort = version:refname
[init]
	defaultBranch = main
[diff]
  algorithm = histogram
  colorMoved = plain
  mnemonicPrefix = true
  renames = true
[push]
  default = simple
  autoSetupRemote = true
  followTags = true
[fetch]
  prune = true
  pruneTags = true
  all = true
[help]
  autocorrect = prompt
[commit]
  verbose = true
[rerere]
	enabled = true
  autoupdate = true
[rebase]
  autoSquash = true
  autoStash = true
  updateRefs = true

# alias
[alias]
# =============================================================================
# ステージング / add
# =============================================================================
  a = !git unstaged | xargs -r git add && git s
  ap = !git add -p $(git unstaged)
  aa = !git add -A && git s
  aaa = !git aa && git cm 'WIP'
  aaaa = !git swc "wip-$(date +%s)" && git add -A && git cm "emergency" -n && git psu

# =============================================================================
# ブランチ管理 / branch
# =============================================================================
  # ブランチ削除
  # branch local delete
  bld = !git bl | fzf --header '[delete local branch]' | awk '{ print $2 }' | xargs -r git branch -D
  # branch remote delete
  brd = !git br | fzf --header '[delete remote branch]' | awk '{ print $2 }' | sed -r 's/([^\\/]+)\\/(.+)/\\1 \\2/g' | xargs -r git push -d origin
  # branch local prune: リモートで削除されたブランチをローカルから削除
  blp = !git branch -vv | grep ': gone]' | awk '{print $1}' | xargs -r git branch -D
  # branch merged delete: 現在のブランチにマージ済みのローカルブランチを削除
  bmd = !git branch --merged | egrep -v '\\*|master|main|dev' | xargs -r git branch -d

  # ユーティリティ
  # ブランチ一覧（日付順）
  b = branch --sort=-authordate
  # 日付付きで表示
  bd = !git for-each-ref --sort=-committerdate --format='%(authordate:short) %(color:yellow)%(refname:short)%(color:reset) %(color:green)[%(authorname)]%(color:reset) %(subject)'
  # local
  bl = !git bd refs/heads
  # remote
  br = !git bd refs/remotes | sed 's/origin\\///'

# =============================================================================
# コミット / commit
# =============================================================================
  c = commit
  cv = commit -v
  cm = commit -m
  cam = commit --amend -m
  can = commit --amend --no-edit
  cav = commit --amend -v

# =============================================================================
# 差分表示 / diff
# =============================================================================
  d = diff
  dc = diff --cached
  dcn = !git --no-pager diff --cached
  dn = diff --name-only
  um = !git --no-pager diff --name-only --diff-filter=U

# =============================================================================
# ログ表示 / log
# =============================================================================
  l = log --date=format:'%Y-%m-%d %H:%M' --pretty=format:'%C(yellow)%h %Cgreen%cd %Cblue%cn %Creset%s'
  ll = !git l --stat
  lg = !git l --graph
  lm = !git l --merges

# =============================================================================
# リモート操作 / fetch & push & pull
# =============================================================================
  ft = fetch
  ftp = fetch --prune
  pl = pull
  ps = push
  psu = push -u origin HEAD
  psf = push -f --force-with-lease --force-if-includes

# =============================================================================
# 変更の取り消し / reset
# =============================================================================
  # ファイル選択式reset
  r = !git staged | xargs -r git reset
  # reset all
  ra = reset
  rh = reset --hard
  # reset to origin
  rho = !git cbn | sed 's/\\.*/origin\\/&/' | xargs -r git rh
  # 1つ前にreset
  rr = reset @^1
  # コミット選択式reset
  rrr = !git l | fzf --preview 'echo {} | awk \"{print \\$1 \\\"^ \\\" \\$1 }\" | xargs -r git diff --color=always' | awk '{ print $1 }' | xargs -r git reset && git s
  
# =============================================================================
# 履歴の書き換え / rebase
# =============================================================================
  rb = rebase
  rba = rebase --abort
  rbc = rebase --continue
  rbi = rebase -i
  rbh = rebase HEAD
  rbo = rebase --onto

# =============================================================================
# 一時保存 / stash
# =============================================================================
  st = stash
  stp = stash pop
  stl = stash list
  sta = stash apply

# =============================================================================
# ブランチ切り替え / switch
# =============================================================================
  # ブランチ切り替え（worktreeがあればcode起動、なければswitch）
  sw = !branch=$(git bl | fzf --header '[switch or open worktree]' | awk '{print $2}') && [ -n \"$branch\" ] && (worktree_path=$(git worktree list | grep \"\\[$branch\\]\" | awk '{print $1}') && [ -n \"$worktree_path\" ] && code \"$worktree_path\" || git switch \"$branch\")
  # 直前にswitch
  sww = switch -
  # 過去のcheckout履歴から選択してswitch
  swww = !git reflog | sed -n 's/.*checkout:.* to \\(.*\\)$/\\1/p' | awk '!seen[$0]++' | fzf | xargs -r git switch
  # ブランチ作成してswitch
  swc = switch -c
  # remoteブランチからswitch
  swr = !git br | grep -v 'HEAD' | fzf --exact --no-sort | awk '{ print $2 }' | xargs -r git switch
  # ユーティリティ
  swm = switch main
  swd = switch dev

# =============================================================================
# ワークツリー管理 / worktree
# =============================================================================
  wl = worktree list
  # worktree作成 or worktreeを開く
  ws = !repo=$(basename $(pwd)) && branch=$(git bl | fzf --header '[create worktree and open in code]' | awk '{print $2}') && [ -n \"$branch\" ] && worktree_dir=\"../$repo.worktree/$branch\" && (git worktree add \"$worktree_dir\" \"$branch\" 2>/dev/null || echo \"Worktree already exists or creation failed\") && code \"$worktree_dir\"
  # worktree削除
  wr = !git worktree list | grep -v '(bare)' | sed '1d' | fzf -m --header '[remove worktree (multi-select with Tab)]' | awk '{print $1}' | xargs -r -I {} git worktree remove {}

# =============================================================================
# 複合操作 / workflow
# =============================================================================
  # 最新のremote状態に更新して不要ブランチ削除
  up = !git ftp && git rho && git blp && git bmd

# =============================================================================
# その他 / other
# =============================================================================
  s = status --short --branch
  # 選択式clean
  cl = !git untracked | xargs -r git clean -f
  # clean all
  clf = clean -df

# =============================================================================
# ユーティリティ / util
# =============================================================================
  alias = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/[\\1] \\2/' | sort | fzf --preview 'echo {}' --preview-window=wrap
  # current branch name
  cbn = branch --show-current # rev-parse --abbrev-ref HEAD
  staged = !git diff --name-only --cached | fzf -m --preview 'git diff --color=always HEAD {}'
  unstaged = !git ls-files -m -o --exclude-standard | fzf -m --preview 'git diff --color=always {}'
  modified = !git diff --name-only | fzf -m --preview 'git diff --color=always HEAD {}'
  untracked = !git ls-files --others --exclude-standard | fzf -m
  info = remote show origin
